---

- name: Create VPC {{ ec2_vpc_name }}
  amazon.aws.ec2_vpc_net:
    name: "{{ ec2_vpc_name }}"
    cidr_block: "{{ ec2_vpc_cidr }}"
    region: "{{ ec2_vpc_region }}"
    state: present
  register: vpc

- name: Create Subnet in VPC
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ ec2_subnet_cidr }}"
    region: "{{ ec2_vpc_region }}"
    state: present
    tags:
      name: "{{ ec2_subnet_name }}"
  register: subnet

- name: Create Internet Gateway (IGW)
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ ec2_vpc_region }}"
    state: present
    tags:
      name: "{{ ec2_igw_name }}"
  register: igw

- name: Create Route Table and add IGW route
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ ec2_vpc_region }}"
    state: present
    tags:
      name: "{{ ec2_rt_name }}"
    subnets:
      - "{{ subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"

- name: Create Security Group
  amazon.aws.ec2_group:
    name: "{{ ec2_sg_name }}"
    description: Allow all on ports
    state: present
    rules:
      - proto: tcp
        ports: "{{ ec2_sg_openports }}"
        cidr_ip: 0.0.0.0/0
        rule_desc: Allow all on ports
    region: "{{ ec2_vpc_region }}"
    vpc_id: "{{ vpc.vpc.id }}"
    tags:
      name: "{{ ec2_sg_name }}"

# - name: check if ec2_key_pair is a file
#   stat:
#     path: "{{ ec2_key_pair }}"
#   register: ec2_key_pair_stat
#   when: ec2_key_pair is defined

# - name: import SSH Key from file
#   amazon.aws.ec2_key:
#     name: "{{ ec2_vpc_name }}"
#     key_material: "{{ lookup('file', ec2_key_pair ) }}"
#     region: "{{ ec2_region }}"
#   when:
#     - ec2_key_pair is defined
#     - ec2_key_pair_stat.stat.exists | bool

# - name: import SSH Key from variable
#   amazon.aws.ec2_key:
#     name: "{{ ec2_vpc_name }}"
#     key_material: "{{ ec2_key_pair }}"
#     region: "{{ ec2_region }}"
#   when:
#     - ec2_key_pair is defined
#     - not ec2_key_pair_stat.stat.exists | bool

- name: Get AMI by Name
  amazon.aws.ec2_ami_info:
    filters:
      name: "{{ ec2_image_name }}"
    region: "{{ ec2_vpc_region }}"
  register: ami_find
  when: not ec2_ami_id

- name: Create RHEL instance
  amazon.aws.ec2_instance:
    image_id: "{{ ami_find.images[-1].image_id | default('') }}"
    instance_type: "{{ ec2_flavor_name }}"
    security_group: "{{ ec2_sg_name }}"
    name: "{{ ec2_instance_name }}"
    key_name: "{{ ec2_vpc_name }}"
    region: "{{ ec2_vpc_region }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    network:
      assign_public_ip: true
    tags:
      name: "{{ ec2_vpc_name }}"
    volumes:
      - device_name: "{{ ec2_ebs_name | default('/dev/sda1', true) }}"
        ebs:
          volume_size: "{{ ec2_disk_size | default(20, true) }}"
          delete_on_termination: true
    state: running

- name: Print instance details
  ansible.builtin.debug:
    msg: "Instance DNS name is: {{ ec2.instances[0].public_dns_name }} with IP address {{ ec2.instances[0].public_ip_address }}"
